#pragma checksum "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\User\AdminPanel.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "524eb771b4cc8d5652c87c3b0d1e6c9e347bbeb4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_User_AdminPanel), @"mvc.1.0.view", @"/Views/User/AdminPanel.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\_ViewImports.cshtml"
using Heka;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\_ViewImports.cshtml"
using Heka.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"524eb771b4cc8d5652c87c3b0d1e6c9e347bbeb4", @"/Views/User/AdminPanel.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a623928139f00d0411ff2c63235787c37ab48927", @"/Views/_ViewImports.cshtml")]
    public class Views_User_AdminPanel : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\User\AdminPanel.cshtml"
  
    ViewData["Title"] = "AdminPanel";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<br />
<br />
<div style=""background-color: rgb(232, 232, 232); border-radius: 20px; padding: 20px"">

    <div>
        <br>
        <div class=""container-fluid"">
            <div class=""row"">
                <div class=""col-md-3"">
                    <img src=""/images/logos/adminLogo.png"">
                </div>
                <div class=""col-md-12"">
                    <div id=""appointmentsPanel"" class=""container-fluid"" style=""display: none"">
                        <table class=""table table-striped"">
                            <thead>
                                <tr>
                                    <th scope=""col"">#</th>
                                    <th scope=""col"">Username</th>
                                    <th scope=""col"">Time</th>
                                    <th scope=""col"">Date</th>
                                    <th scope=""col"">Comment</th>
                                    <th scope=""col"">Status</th>
                                    <th");
            WriteLiteral(@" scope=""col""></th>
                                </tr>
                            </thead>
                            <tbody id=""appointmentRequestTable"">
                            </tbody>
                        </table>
                        <hr />
                        <br />
                    </div>
                </div>

            </div>
        </div>
        <br><br>
    </div>
</div>

");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>

        function rejectRequest(requestId) {

            Swal.fire({
                title: 'Are you sure?',
                text: ""The request will be rejected"",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                cancelButtonText: 'No',
                confirmButtonText: 'Yes, reject it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '");
#nullable restore
#line 63 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\User\AdminPanel.cshtml"
                         Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/Appointment/RejectRequest/'+requestId,
                        type: 'POST',
                        contentType: 'application/json',
                        //dataType: ""json"",
                        beforeSend: function(xhr) {
                            xhr.setRequestHeader(""Authorization"", localStorage.getItem('token'));
                        },
                        success: function (res) {
                            if (res.isDone === ""False"") {
                                swal.fire({
                                    timer: 3500,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""Error"",
                                    text: res.message,
                                    icon: 'error'
                                });
                            } else {
                                swal.fire({
                                    timer: 3000");
                WriteLiteral(@",
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""Done !"",
                                    text: res.message,
                                    icon: 'success'
                                }).then(function() {
                                    window.location.reload();
                                });
                            }
                        },
                        error: function(err) {
                            swal.fire({
                                timer: 1000,
                                showCancelButton: false,
                                showConfirmButton: false,
                                title: ""Error"",
                                text: ""Server did not response correctly"",
                                icon: 'error'
                            });
                        }
                    });
           ");
                WriteLiteral(@"     }
            })

        }


        function confirmRequest(requestId) {

            Swal.fire({
                title: 'Are you sure?',
                text: ""The appointment will be confirmed"",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                cancelButtonText: 'No',
                confirmButtonText: 'Yes, Confirm !'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '");
#nullable restore
#line 124 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\User\AdminPanel.cshtml"
                         Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/Appointment/ConfirmRequest/'+requestId,
                        type: 'POST',
                        contentType: 'application/json',
                        //dataType: ""json"",
                        beforeSend: function(xhr) {
                            xhr.setRequestHeader(""Authorization"", localStorage.getItem('token'));
                        },
                        success: function (res) {
                            if (res.isDone === ""False"") {
                                swal.fire({
                                    timer: 3500,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""Error"",
                                    text: res.message,
                                    icon: 'error'
                                });
                            } else {
                                swal.fire({
                                    timer: 300");
                WriteLiteral(@"0,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""Done !"",
                                    text: res.message,
                                    icon: 'success'
                                }).then(function() {
                                    window.location.reload();
                                });
                            }
                        },
                        error: function(err) {
                            swal.fire({
                                timer: 1000,
                                showCancelButton: false,
                                showConfirmButton: false,
                                title: ""Error"",
                                text: ""Server did not response correctly"",
                                icon: 'error'
                            });
                        }
                    });
          ");
                WriteLiteral("      }\r\n            })\r\n\r\n        }\r\n\r\n\r\n        $(document).ready(function() {\r\n\r\n\r\n            $.ajax({\r\n                url: \'");
#nullable restore
#line 175 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\User\AdminPanel.cshtml"
                 Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/Authentication/IsAdmin',
                type: 'GET',
                contentType: 'application/json',
                //dataType: ""json"",
                beforeSend: function(xhr) {
                    xhr.setRequestHeader(""Authorization"", localStorage.getItem('token'));
                },
                success: function(res) {
                    if (res === false) {
                location.replace('/');
                        }
                },
                error: function(err) {
                    swal.fire({
                        timer: 1000,
                        showCancelButton: false,
                        showConfirmButton: false,
                        title: ""Error"",
                        text: ""Server did not response correctly"",
                        icon: 'error'
                    });
                }
            });

            $.ajax({
                url: '");
#nullable restore
#line 200 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\User\AdminPanel.cshtml"
                 Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/Appointment/GetAllAppointments',
                type: 'GET',
                contentType: 'application/json',
                //dataType: ""json"",
                beforeSend: function(xhr) {
                    xhr.setRequestHeader(""Authorization"", localStorage.getItem('token'));
                },
                success: function (res) {
                    if (res === ""No Appointments"") {
                        swal.fire({
                            timer: 2000,
                            showCancelButton: false,
                            showConfirmButton: false,
                            text: ""No Appointments"",
                            icon: 'error'
                        });
                    } else {
                        $(""#appointmentsPanel"").toggle(800);
                        $(""#appointmentRequestTable"").html("""");
                        var status;
                        $.each(res,
                            function (i, item) {
                    ");
                WriteLiteral(@"            if (item.status === ""inProgress"") {
                                    status = '<span class=""badge badge-warning"">In Progress</span>';
                                }
                                if (item.status === ""confirmed"") {
                                    status = '<span class=""badge badge-success"">Confirmed</span>';
                                }
                                if (item.status === ""rejected"") {
                                    status = '<span class=""badge badge-danger"">Rejected</span>';
                                }
                                $('#appointmentRequestTable').append('<tr><th scope=""row"">' + (i + 1) + '</th><td>' + item.username + '</td><td>' + item.time + '</td><td>' + item.date + '</td><td>' + item.comment + '</td><td>' + status + '</td><td><button class=""btn btn-sm btn-outline-success"" onclick=""confirmRequest(' + item.appointmentId +')"">Confirm</button><span> </span><button class=""btn btn-sm btn-outline-danger"" onclick=""rej");
                WriteLiteral(@"ectRequest(' + item.appointmentId+')"">Reject</button></td></tr>');
                            });
                    }
                },
                error: function(err) {
                    swal.fire({
                        timer: 1000,
                        showCancelButton: false,
                        showConfirmButton: false,
                        title: ""Error"",
                        text: ""Server did not response correctly"",
                        icon: 'error'
                    });
                }
            });
        });

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
