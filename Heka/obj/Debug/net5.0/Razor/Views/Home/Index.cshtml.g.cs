#pragma checksum "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7c9cd9bd8bd74a43437762474dfb0c1dc5d5e9cc"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\_ViewImports.cshtml"
using Heka;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\_ViewImports.cshtml"
using Heka.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7c9cd9bd8bd74a43437762474dfb0c1dc5d5e9cc", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a623928139f00d0411ff2c63235787c37ab48927", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/logos/AppoinmentLogo.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/timepicker/dist/jquery-clockpicker.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"






<!-- Login Modal -->
<div class=""modal fade"" id=""loginPanel"" tabindex=""-1"" role=""dialog"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""exampleModalLabel"">Login</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div class=""text-center"">
                    <img src=""/images/logos/LoginLogo.png"" class=""myHeight160"" />
                </div>
                <br />
                <label for=""username"">Username</label>
                <input type=""text"" class=""form-control"" id=""username"" placeholder=""Username.."">
                <small id=""emailHelp"" class=""form-text text-muted"">Please enter your username..<");
            WriteLiteral(@"/small>
                <br />
                <label for=""password"">Password</label>
                <input type=""password"" class=""form-control"" id=""password"" placeholder=""Password.."">
                <small id=""emailHelp"" class=""form-text text-muted"">Please enter your password..</small>

            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                <button type=""button"" class=""btn btn-success"" id=""btnLogin"">Login</button>
            </div>
        </div>
    </div>
</div>


<!-- Registration Modal -->
<div class=""modal fade"" id=""registrationPanel"" tabindex=""-1"" role=""dialog"" aria-labelledby=""registratoinPanelLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""registrationPanelLabel"">Registration</h5>
                <button type=""button");
            WriteLiteral(@""" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div class=""text-center"">
                    <img src=""/images/logos/AddLogo.png"" class=""myHeight160"" />
                </div>
                <br />
                <label for=""username"">New Username</label>
                <input type=""text"" class=""form-control"" id=""newUsername"" placeholder=""Username.."">
                <small class=""form-text text-muted"">Please choose a new username..</small>
                <br />
                <label for=""password"">Password</label>
                <input type=""password"" class=""form-control"" id=""newPassword"" placeholder=""Password.."">
                <small class=""form-text text-muted"">Please enter password..</small>
                <a href=""#"" data-toggle=""modal"" data-dismiss=""modal"" data-target=""#loginPanel"">Already a user ?</a>
          ");
            WriteLiteral(@"  </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                <button type=""button"" id=""btnRegister"" class=""btn btn-success"">Register</button>
            </div>
        </div>
    </div>
</div>






<br />

<div class=""text-center"" id=""checkAppointmentsButtonPanel"">
    
    
</div>

<div id=""appointmentsPanel"" class=""container-fluid w-75"" style=""display: none"">
    <table class=""table table-striped"">
        <thead>
            <tr>
                <th scope=""col"">#</th>
                <th scope=""col"">Time</th>
                <th scope=""col"">Date</th>
                <th scope=""col"">Your Comment</th>
                <th scope=""col"">Status</th>
                <th scope=""col""></th>
            </tr>
        </thead>
        <tbody id=""appointmentRequestTable"">
        </tbody>
    </table>
    <hr />
    <br />
</div>


<div style=""background-color: rgb(232, 232, 2");
            WriteLiteral(@"32); border-radius: 20px; padding: 20px"">

    <div>
        <br />
        <div class=""container-fluid"">
            <div class=""row"">
                <div class=""col-md-9"">
                    <div class=""row"">
                        <div class=""col-md-5"">
                            <label for=""time"">Select Time:</label>
                            <div class=""input-group clockpicker"" data-autoclose=""true"">
                                <input id=""time"" type=""text"" class=""form-control""");
            BeginWriteAttribute("value", " value=\"", 4648, "\"", 4656, 0);
            EndWriteAttribute();
            WriteLiteral(@" placeholder=""Click to set the time"">
                                <span class=""input-group-addon"">
                                    <span class=""glyphicon glyphicon-time""></span>
                                </span>
                            </div>
                        </div>
                        <div class=""col-md-5"">
                            <label for=""date"">Select Date:</label>
                            <div class=""input-group input-daterange date "">
                                <input id=""date"" type=""text"" class=""form-control""");
            BeginWriteAttribute("value", " value=\"", 5229, "\"", 5237, 0);
            EndWriteAttribute();
            WriteLiteral(@" placeholder=""Click to pick a date"">

                            </div>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-md-12"">
                            <div class=""form-group"">
                                <br />
                                <label for=""exampleFormControlTextarea1"">
                                    Comment:
                                    <span class=""font-weight-light"">
                                        (optional)
                                    </span>
                                </label>
                                <textarea id=""comment"" class=""form-control"" id=""exampleFormControlTextarea1"" rows=""3""></textarea>
                            </div>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-md-12"">
                            <button id=""btnAppointment"" class");
            WriteLiteral("=\"btn btn-info\">Make the appointment</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-md-3\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "7c9cd9bd8bd74a43437762474dfb0c1dc5d5e9cc11106", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <br /><br />\r\n    </div>\r\n</div>\r\n\r\n\r\n<br />\r\n<br />\r\n<div class=\"row justify-content-center\" id=\"btnPanel\">\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7c9cd9bd8bd74a43437762474dfb0c1dc5d5e9cc12493", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script>

        function deleteRequest(requestId) {

            Swal.fire({
                title: 'Are you sure?',
                text: ""Your request will be cancelled"",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                cancelButtonText: 'No',
                confirmButtonText: 'Yes, cancel it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '");
#nullable restore
#line 197 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\Home\Index.cshtml"
                         Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/Appointment/DeleteAppointmentRequest/'+requestId,
                        type: 'POST',
                        contentType: 'application/json',
                        //dataType: ""json"",
                        beforeSend: function(xhr) {
                            xhr.setRequestHeader(""Authorization"", localStorage.getItem('token'));
                        },
                        success: function (res) {
                            if (res.isDone === ""False"") {
                                swal.fire({
                                    timer: 3500,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""Error"",
                                    text: res.message,
                                    icon: 'error'
                                });
                            } else {
                                swal.fire({
                                    ");
                WriteLiteral(@"timer: 3000,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""Done !"",
                                    text: res.message,
                                    icon: 'success'
                                }).then(function() {
                                    window.location.reload();
                                });
                            }
                        },
                        error: function(err) {
                            swal.fire({
                                timer: 1000,
                                showCancelButton: false,
                                showConfirmButton: false,
                                title: ""Error"",
                                text: ""Server did not response correctly"",
                                icon: 'error'
                            });
                        }
                    });
");
                WriteLiteral("                }\r\n            })\r\n\r\n        }\r\n\r\n        function goToAdminPanel() {\r\n            $.ajax({\r\n                url: \'");
#nullable restore
#line 245 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\Home\Index.cshtml"
                 Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/Authentication/IsAdmin',
                type: 'GET',
                contentType: 'application/json',
                //dataType: ""json"",
                beforeSend: function(xhr) {
                    xhr.setRequestHeader(""Authorization"", localStorage.getItem('token'));
                },
                success: function(res) {
                    if (res === false) {
                        swal.fire({
                            timer: 4000,
                            showCancelButton: false,
                            showConfirmButton: false,
                            title: ""You are not admin"",
                            text: ""You don't have access to the page"",
                            icon: 'error'
                        });
                    } else {
                        location.replace('/User/AdminPanel');
                    }
                },
                error: function(err) {
                    swal.fire({
                        timer: 1000,
");
                WriteLiteral(@"                        showCancelButton: false,
                        showConfirmButton: false,
                        title: ""Error"",
                        text: ""Server did not response correctly"",
                        icon: 'error'
                    });
                }
            });
        }

        $(document).ready(function () {




            $('.clockpicker').clockpicker();
            $('.input-daterange input').each(function() {
                $(this).datepicker('clearDates');
            });


            if (localStorage.getItem('token') === null) {
                $(""#btnPanel"").append('<button class=""btn btn-primary"" data-toggle=""modal"" data-target=""#loginPanel"">Login</button><span>   </span><button class=""btn btn-warning"" data-toggle=""modal"" data-target=""#registrationPanel"">Register</button>');
            } else {
                $.ajax({
                    url: '");
#nullable restore
#line 294 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\Home\Index.cshtml"
                     Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/Authentication/IsAdmin',
                    type: 'GET',
                    contentType: 'application/json',
                    //dataType: ""json"",
                    beforeSend: function(xhr) {
                        xhr.setRequestHeader(""Authorization"", localStorage.getItem('token'));
                    },
                    success: function(res) {
                        if (res === true) {
                            $(""#btnPanel"").append('<span>   </span><button class=""btn btn-success"" href=""/User/AdminPanel"" id=""btnGoToAdminPanel"" onclick=""goToAdminPanel()"">Admin Panel</button>');
                        }
                    },
                    error: function(err) {
                        swal.fire({
                            timer: 1000,
                            showCancelButton: false,
                            showConfirmButton: false,
                            title: ""Error"",
                            text: ""Server did not response correctly"",
       ");
                WriteLiteral(@"                     icon: 'error'
                        });
                    }
                });
                $(""#btnPanel"").append('<button class=""btn btn-danger"" id=""btnLogout"">Logout</button>');
                $(""#checkAppointmentsButtonPanel"").append('<button class=""btn btn-success"" id=""btnAppointmentRequest"">My Appointment Requests</button><br/><br/>');
            }

            $(""#btnRegister"").on(""click"",
                function() {
                    var newPassword = String($(""#newPassword"").val());
                    var newUsername = String($(""#newUsername"").val());

                    $.ajax({
                        url: '");
#nullable restore
#line 327 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\Home\Index.cshtml"
                         Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/User/Register',
                        type: 'POST',
                        contentType: 'application/json',
                        //dataType: ""json"",
                        //beforeSend: function(xhr) {
                        //    xhr.setRequestHeader(""Authorization"",localStorage.getItem('token'));
                        //}
                        data: JSON.stringify({
                            username: newUsername,
                            password: newPassword
                        }),
                        success: function(res) {
                            if (res === ""DuplicatedUserName"") {
                                swal.fire({
                                    timer: 3500,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""Error"",
                                    text: ""Username is taken, try another username"",
                      ");
                WriteLiteral(@"              icon: 'error'
                                });
                            } else {
                                localStorage.setItem('token', String(res));
                                swal.fire({
                                    timer: 3000,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""Registration Done successfully"",
                                    text: ""Now you can make an appointment"",
                                    icon: 'success'
                                }).then(function() {
                                    window.location.reload();
                                });
                            }
                        },
                        error: function(err) {
                            swal.fire({
                                timer: 1000,
                                showCancelButton: false,
        ");
                WriteLiteral(@"                        showConfirmButton: false,
                                title: ""Error"",
                                text: ""Server did not response correctly"",
                                icon: 'error'
                            });
                        }
                    });
                });

            $(""#btnAppointment"").on(""click"",
                function() {
                    var time = String($(""#time"").val());
                    var date = String($(""#date"").val());
                    var comment = String($(""#comment"").val());

                    $.ajax({
                        url: '");
#nullable restore
#line 382 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\Home\Index.cshtml"
                         Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/Appointment/SetAppointment',
                        type: 'POST',
                        contentType: 'application/json',
                        //dataType: ""json"",
                        beforeSend: function(xhr) {
                            xhr.setRequestHeader(""Authorization"", localStorage.getItem('token'));
                        },
                        data: JSON.stringify({
                            Time: time,
                            Date: date,
                            Comment: comment
                        }),
                        success: function(res) {
                            if (res.isDone === ""False"") {
                                swal.fire({
                                    timer: 4000,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""No free time"",
                                    text: res.message,
                 ");
                WriteLiteral(@"                   icon: 'error'
                                });
                            } else {
                                swal.fire({
                                    timer: 3000,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""Done !"",
                                    text: res.message,
                                    icon: 'success'
                                }).then(function() {
                                    window.location.reload();
                                });
                            }
                        },
                        error: function(err) {
                            swal.fire({
                                timer: 1000,
                                showCancelButton: false,
                                showConfirmButton: false,
                                title: ""Error"",
                  ");
                WriteLiteral(@"              text: ""Server did not response correctly"",
                                icon: 'error'
                            });
                        }
                    });
                });

            $(""#btnAppointmentRequest"").on(""click"",
                function() {
                    $.ajax({
                        url: '");
#nullable restore
#line 433 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\Home\Index.cshtml"
                         Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/Appointment/GetUserAppointments',
                        type: 'GET',
                        contentType: 'application/json',
                        //dataType: ""json"",
                        beforeSend: function(xhr) {
                            xhr.setRequestHeader(""Authorization"", localStorage.getItem('token'));
                        },
                        success: function (res) {
                            if (res === ""No Appointments"") {
                                swal.fire({
                                    timer: 2000,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    text: ""No Appointments"",
                                    icon: 'error'
                                });
                            } else {
                                $(""#appointmentsPanel"").toggle(800);
                                $(""#appointmentRequestTable"").html("""");");
                WriteLiteral(@"
                                var status;
                                $.each(res,
                                    function (i, item) {
                                        if (item.status === ""inProgress"") {
                                            status = '<span class=""badge badge-warning"">In Progress</span>';
                                        }
                                        if (item.status === ""confirmed"") {
                                            status = '<span class=""badge badge-success"">Confirmed</span>';
                                        }
                                        if (item.status === ""rejected"") {
                                            status = '<span class=""badge badge-danger"">Rejected</span>';
                                        }
                                        $('#appointmentRequestTable').append('<tr><th scope=""row"">' + (i + 1) + '</th><td>' + item.time + '</td><td>' + item.date + '</td><td>' + item.comment + '");
                WriteLiteral(@"</td><td>' + status + '</td><td><button class=""btn btn-sm btn-outline-danger"" onclick=""deleteRequest(' + item.appointmentId+')"">Cancel Request</button></td></tr>');
                                    });
                            }
                        },
                        error: function(err) {
                            swal.fire({
                                timer: 1000,
                                showCancelButton: false,
                                showConfirmButton: false,
                                title: ""Error"",
                                text: ""Server did not response correctly"",
                                icon: 'error'
                            });
                        }
                    });
                });

            $(""#btnLogin"").on(""click"",
                function() {

                    var password = String($(""#password"").val());
                    var username = String($(""#username"").val());

                    ");
                WriteLiteral("$.ajax({\r\n                        url: \'");
#nullable restore
#line 488 "C:\Users\user\Desktop\Heka_Project\Heka\Heka\Views\Home\Index.cshtml"
                         Write(Heka.Startup.ApiUrl);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"/api/Authentication/Login',
                        type: 'POST',
                        contentType: 'application/json',
                        //dataType: ""json"",
                        //beforeSend: function(xhr) {
                        //    xhr.setRequestHeader(""Authorization"",localStorage.getItem('token'));
                        //}
                        data: JSON.stringify({
                            username: username,
                            password: password
                        }),
                        success: function(res) {
                            if (res.token === ""Username or password is incorrect"") {
                                swal.fire({
                                    timer: 1000,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""Error"",
                                    text: ""Username or password is incorrect"",
      ");
                WriteLiteral(@"                              icon: 'error'
                                });
                            } else {
                                localStorage.setItem('token', String(res.token));
                                swal.fire({
                                    timer: 1000,
                                    showCancelButton: false,
                                    showConfirmButton: false,
                                    title: ""You LoggedIn"",
                                    text: ""Login successfully"",
                                    icon: 'success'
                                }).then(function() {
                                    window.location.reload();
                                });
                            }

                        },
                        error: function(err) {
                            swal.fire({
                                timer: 1000,
                                showCancelButton: false,
               ");
                WriteLiteral(@"                 showConfirmButton: false,
                                title: ""Error"",
                                text: ""Server did not response correctly"",
                                icon: 'error'
                            });
                        }
                    });
                });

            $(""#btnLogout"").on(""click"",
                function() {

                    localStorage.removeItem('token');

                    swal.fire({
                        timer: 1000,
                        showCancelButton: false,
                        showConfirmButton: false,
                        title: ""You LoggedOut"",
                        text: ""Logout successfully"",
                        icon: 'success'
                    }).then(function() {
                        window.location.reload();
                    });

                });

        });


    </script>
");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
